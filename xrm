#!/bin/bash
#############################################
# author:fang
# version : v1.0
# name  : xrm
# dispcripe: this is a recycled rm
# CopyRight@fangyunjiang[42550564@qq.com]
#############################################

source ~/command/common

function get_files()
{
	local len file
	file="$1"
	eval "$(awk -v FS="$_FS" '{print "_files["NR-1"]=\""$1"\" _deltime["NR-1"]="$2}' $file)"
	len=${#_files[@]}
	for((i=0; i<len; i++));do
		_files[i]="${_files[i]} $(date '+%F %T' -d @${_deltime[i]})"
	done

}

function delete_single_recycle()
{
	local cur_time date_time time_secs del_name del_path ret
	if [ -f "$1" -o -d "$1" ];then
		cur_time=$(date '+%Y-%m-%d-%H-%M-%S %s')
		date_time=${cur_time:0:19}
		time_secs=${cur_time:20}
		del_name=$(basename "$1")
		del_path=$(dirname "$1")
		del_path=$(__get_full_path "$del_path")

		if [ "$del_name" = "." -o "$del_name" = ".." -o -z "$del_path" ];then
			__error "delete file $1 not exist" 
			return 
		fi
		__debug mv $del_path/$del_name $del_path/.$date_time-$del_name._bak_
		mv "$del_path/$del_name" "$del_path/.$date_time-$del_name._bak_"
		ret=$?
		__debug $del_path/$del_name $time_secs
		if [ $ret -eq 0 ];then
			echo "$del_path/$del_name""$_FS""$time_secs">>$_recycle_record_file
		fi
		__debug delete $del_path/$del_name success
	else
		__error "delete file $1 not exist" 
	fi
}

function delete_single_mac()
{
	local del_name del_path
	if [ -f "$1" -o -d "$1" ];then
		del_name=$(basename "$1")
		del_path=$(dirname "$1")
		del_path=$(__get_full_path "$del_path")
		#osascript -e 'tell app "Finder" to empty'
		#osascript -e 'tell app "Finder" to delete the POSIX file '$del_path/$del_name''
		osascript -e 'tell app "Finder" to move the POSIX file '$del_path/$del_name' to trash'
	fi
}

function delete_single()
{
	if [ $_FORCE -eq 0 ];then
		delete_single_recycle "$1"
	else
		$_RM_ -fr "$1"
		__debug "delete $1 success"
	fi
}

function deal_delete()
{
	local i j
	if [ $_LIST -eq 1 ];then
		unset _list_
		for ((i=0, j=0; i<$_argc_; i++));do
			if ! [ -z "${_argv_[i]}" ];then
				_list_[j]=${_argv_[i]}
				((j++))
			fi
		done
		__checkbox "" "delete_single $_TARGET_" "yes" "delete" "delete the selected files"
	else
		for ((i=0; i<$_argc_; i++));do
			if ! [ -z "${_argv_[i]}" ];then
				delete_single "${_argv_[i]}"
			fi
		done
	fi

	if [ $_FORCE -eq 0 ];then
		#sort -k1,1fb -k2n $_recycle_record_file -o $_recycle_record_file
		sort -k2nr -k1 -t '|' $_recycle_record_file -o $_recycle_record_file
	fi
}

function delete_mult_mac()
{
	local i
	if __mac ;then
		for ((i=0; i<$_argc_; i++));do
			if ! [ -z "${_argv_[i]}" ];then
				delete_single_mac "${_argv_[i]}"
			fi
		done
	fi
}

function recover_single()
{
	local rec_name rec_path del_name del_time del_sec del_file

	del_file="$(echo "$@"|$_SED_ 's/^\(.*\)[[:space:]]\{1,\}[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}.*/\1/')"
	del_time="$(echo "$@"|$_SED_ 's/^.*\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\)/\1/')"

	rec_name=$(basename "$del_file")
	rec_path=$(dirname "$del_file")
	del_sec=$(date '+%s' -d "$del_time")

	[ "$rec_path" = "/" ] && rec_path=""
	del_name=$rec_path/.$(date '+%Y-%m-%d-%H-%M-%S' -d "$del_time")-$rec_name._bak_
	if [ -f "$del_name" -o -d "$del_name" ];then
		if [ -f "$rec_path/$rec_name" -o -d "$rec_path/$rec_name" ];then	
			read -p "$rec_path/$rec_name have exist,cover it or not(y/n):" yesno
			if [ "$yesno" != "y" ];then
				return
			fi
		fi
		__debug mv $del_name $rec_path/$rec_name
		mv "$del_name" "$rec_path/$rec_name"
		__debug recover $rec_path/$rec_name success
	else
		__error $rec_path/$rec_name file not exist 
	fi
	$_SED_ -i 's#^'"$del_file$_FS$del_sec"'$##;/^$/d' $_recycle_record_file
}

function clean_single()
{
	local del_path del_name del_file del_time del_sec

	del_file="$(echo "$@"|$_SED_ 's/^\(.*\)[[:space:]]\{1,\}[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}.*/\1/')"
	del_time="$(echo "$@"|$_SED_ 's/^.*\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\)/\1/')"
	
	del_path=$(dirname "$del_file")
	del_sec=$(date '+%s' -d "$del_time")

	[ "$del_path" = "/" ] && del_path=""
	del_name=$del_path/.$(date '+%Y-%m-%d-%H-%M-%S' -d "$del_time")-$(basename "$del_file")._bak_
	if [ -f "$del_name" -o -d "$del_name" ];then
		$_RM_ -fr "$del_name"
		__debug clean $del_file success
	else
		__debug file $del_file not exist 
	fi
	$_SED_ -i 's#^'"$del_file$_FS$del_sec"'$##;/^$/d' $_recycle_record_file
}

function recover_mult()
{
	unset _list_
	_list_=("${_files[@]}")
	__checkbox "" "recover_single $_TARGET_" "yes" "recover" "recover the deleted files"
}

function recover_all()
{
	local i
	for ((i=0; i<${#_files[@]}; i++));do
		recover_single "${_files[$i]}"
	done
}

function recover()
{
	get_files "$1"
	if [ "$_ALL" = "1" ];then
		recover_all
	else
		recover_mult
	fi
}

function clean_mult()
{
	unset _list_
	_list_=("${_files[@]}")
	__checkbox "" "clean_single $_TARGET_" "yes" "clean" "clean the deleted files"
}

function clean_all()
{
	local i
	for ((i=0; i<${#_files[@]}; i++));do
		clean_single "${_files[$i]}"
	done
}

function clean()
{
	get_files "$1"
	if [ "$_ALL" = "1" ];then
		clean_all
	else
		clean_mult
	fi
}

function do_process()
{
	local type
	type="$1"
	case "$type" in
		recover)recover "$2";;
		clean)clean "$2";;
	esac
}

function process()
{
	local type dir dir_len path i n
	type="$1"
	for ((dir_len, i=0; i<$_argc_; i++));do
		if ! [ -z "${_argv_[i]}" ];then
			dir[dir_len]=${_argv_[i]}
			((dir_len++))
		fi
	done
	if ((dir_len==0));then
		do_process "$type" "$_recycle_record_file"
	else
		n=0
		echo -n > $_tmp_record_file
		for ((i=0; i<dir_len; i++));do
			if [ -f "${dir[i]}" -o -d "${dir[i]}" ];then
				n=1
				path=$(__get_full_path "${dir[i]}")
				grep "^$path" $_recycle_record_file 1>>$_tmp_record_file
			else
				__warning "${dir[i]} is not exist, ignore it"
			fi
		done
		((n==1))&& do_process "$type" "$_tmp_record_file"
	fi
}

function deal_clean()
{
	process "clean"
}

function deal_recover()
{
	process "recover"
}

function show_usage()
{
	local -a list

	list="help"
	list=("${list[@]}" "Usage:rm [-u|-c][-f][-w][-h] files")
	list=("${list[@]}" "--clean(-c) [dir][all]:forever remove files")
	list=("${list[@]}" "--undo(-u) [dir][all]:undo delete files")
	list=("${list[@]}" "--force(-f):force delete files")
	list=("${list[@]}" "--invert(-t):delete invert files")
	list=("${list[@]}" "--list(-l):use combox list to delete files")
	list=("${list[@]}" "--help(-h):show help")
	list=("${list[@]}" "-----------")
	list=("${list[@]}" "version:rm v1.0")
	list=("${list[@]}" "author:fangyunjiang")

	__msgbox "${list[@]}"
}

function get_flags()
{
	__check_opts "--interactive" "--interactive=" "-i" "-I"
	__check_opts "--verbose" "-v" 
	__check_opts "--recursive" "-R" "-r" "-d" "--dir"
	__check_opts "--force" "-f" "-Rf" "-fR" "-fr" "-rf" && _FORCE=1
	__check_opts "--undo" "-u"  && _OPER=1
	__check_opts "--clean" "-c"  && _OPER=2
	__check_opts "--list" "-l"  && _LIST=1
	__check_opts "--help" "-h"  && _OPER=3
	__check_opts "--all" "-a"  && _ALL=1
}

function filter_files()
{
	local i j invert_pos

	_argc_=$#
	_argv_=("$@")
	invert_pos=$_argc_

	get_flags "$@"

	for((i=0; i<$_argc_; i++));do
		if [ "${_argv_[i]}" = "--invert" -o "${_argv_[i]}" = "-t" ];then
			invert_pos=$i
			_INVERT=1
		fi
	done

	if [ $_INVERT -eq 1 ];then
		for ((i=0; i<invert_pos; i++));do
			for ((j=invert_pos+1; j<_argc_; j++));do
				if [ "${_argv_[i]}" = "${_argv_[j]}" ];then
					unset _argv_[i]
					break
				fi
			done
		done
		_argc_=$invert_pos
	fi

	[ -f $_recycle_record_file ]||echo -n > $_recycle_record_file
}


#global viarables
_recycle_record_file=~/.recycle_record_file
_tmp_record_file=~/.tmp_record_file
_FS="|"
declare -a _files
declare -a _deltime
_OPER=0
_FORCE=0
_INVERT=0
_LIST=0
_ALL=0


function main()
{

	filter_files "$@"

	case $_OPER in
		0) deal_delete;;
		1) deal_recover;;
		#2) __sudo && deal_clean;;
		2) deal_clean;;
		3) show_usage;;
	esac
}

main "$@"



