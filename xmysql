#!/usr/bin/env node

// mysql> alter user 'root'@'localhost' identified with mysql_native_password by '123456';
// mysql> flush privileges;

const mysql = require('mysql2');
const moment = require('moment');
const command = require('./js/command');
const _ = require('lodash');
const DATA_BASE = 'db_smart_plate';
const CACHE = {};

let _prettyShell = true;
async function createMysql (commands, options) {
    const db = mysql.createConnection({
        host: process.argv[2] || 'localhost',
        user: 'root',
        password: '123456',
        database: DATA_BASE,
    });
    const tables = await getTables(null, db);
    let allFileds = [];
    for (const table of tables) {
        const fields = await initFieldsOfTable(null, table, db);
        allFileds = [...allFileds, ...fields];
    }
    allFileds = _.uniq(allFileds);
    // 添加表，字段的自动完成
    function completer(line) {
        const words = line.replace(/\s,\s/g, ',').trimLeft().split(/\s/);
        const linePartial = _.last(_.last(words).split(','));
        let list = [];
        if (words.length <= 1) {
            list = ['select', 'update', 'delete'].filter((o) => o.startsWith(linePartial));
        } else {
            const preWord = _.toLower(_.nth(words, -2));
            if (_.includes(['from', 'update', 'into', 'ls', 's', 'm', 'r', 'c'], preWord)) {
                list = tables.filter((o) => o.startsWith(linePartial));
            }  else {
                const prePreWord = _.toLower(_.nth(words, -3));
                if (prePreWord === 's') {
                    const table = preWord;
                    const fields = CACHE[table];
                    list = fields.filter((o) => o.startsWith(linePartial));
                } else {
                    list = allFileds.filter((o) => o.startsWith(linePartial));
                }
            }
        }
        const found = list.filter((o) => o.startsWith(linePartial));
        return [found.length ? found : list, linePartial];
    }

    command(commands, { ...options, db, completer });
}
async function format(self, line, db) {
    const matches = line.match(/select(.*)from\s*(\w+)/);
    if (matches) {
        let list = matches[1].split(/,|\s/).filter(o=>o).join(',');
        const fields = await formatFields(this, matches[2], list, db);
        line = line.replace(/select.*from/, `select ${fields} from`);
    }
    return line;
}
function formatResult(obj) {
    for (const key in obj) {
        const item = obj[key];
        if (item instanceof Buffer) {
            obj[key] = !!item.readInt8(0);
        } else if (item instanceof Date) {
            obj[key] = moment(item).format('YYYY-MM-DD HH:mm:ss');
        }
    }
    return obj;
}
async function formatFields(self, table, line, db) {
    if (!line || line === '*') {
        return '*';
    }
    let list = line.split(',');
    const allFields = getFieldsOfTable(table);
    list = list.map(o => new RegExp(o.replace('<', '^').replace('>', '$'), 'i'));

    return allFields.filter(o=>_.some(list, r=>r.test(o))).join(',');
}
function formatLine(line) {
    return line
    .replace(/\s,\s/g, ',')
    .replace(/\s=\s/g, '=')
    .replace(/\s~\s/g, '~')
    .replace(/\s\|\s/g, '|')
    .replace(/\s&\s/g, '&')
    .replace(/\s#\s/g, '#')
    .trim().split(/\s/).filter(o=>o);
}
async function getTables(self, db) {
    if (!CACHE._tables) {
        CACHE._tables = (await querySQL(self, db, 'show tables')).map(o=>o[_.keys(o)[0]]);
    }
    return CACHE._tables;
}
async function initFieldsOfTable(self, table, db) {
    CACHE[table] = (await querySQL(self, db, 'desc ' + table)).map(o=>o.Field);
    return CACHE[table];
}
function getFieldsOfTable(table) {
    if (!CACHE[table]) {
        return [];
    }
    return CACHE[table];
}
function querySQL(self, db, query) {
    return new Promise(resolve=>{
        db.query(query, (err, results) => {
            if (err) {
                if (self) {
                    self.error(err);
                    self.prompt();
                }
                resolve([]);
            } else {
                resolve(results);
            }
        });
    })
}
async function executeSQL(self, line, db) {
    const results = await querySQL(self, db, line);
    if (results.forEach) {
        results.forEach(o=>{
            self.showJson(formatResult(o), _prettyShell);
        });
    } else {
        self.showJson(results, _prettyShell);
    }
    self.prompt();
}
async function executeLine(line, { db }) {
    if (!line) {
        return this.prompt();
    }
    line = await format(this, line, db);
    await executeSQL(this, line, db);
}
async function showTables(line, { db }) {
    if (!line) { // show tables
        let results = await querySQL(this, db, 'select database() as db');
        this.print('tables in '+ results[0].db +' :', 'red');
        results = await querySQL(this, db, 'show tables');
        if (results) {
            this.print(_.map(results, o=>o[_.keys(o)[0]]).join('  '), 'green');
            this.prompt();
        }
    } else if (line === '-') { // show databases
        this.print('databases :', 'red');
        const results = await querySQL(this, db, 'show databases');
        this.print(results.map(o=>o.Database).join('  '), 'green');
        this.prompt();
    } else { // show table fields
        line = line.replace(/[^\w]*/g, '');
        const fields = getFieldsOfTable(line);
        this.print(fields.join('  '), 'green');
        this.prompt();
    }
}
function formatCond(line) {
    if (!line) {
        return '';
    }
    return 'WHERE ' + line
    .replace(/&/g, ' AND ')
    .replace(/\|/g, ' OR ')
    .replace(/~/g, ' LIKE ')
    .replace(/</g, '%')
    .replace(/>/g, '%')
    .replace(/#([\w,]*)/g, ' IN ($1)');
}
async function showTableLines (line, { db }) {
    let list = formatLine(line);
    const table = list[0];
    if (!table) {
        this.error('invalid oper');
        return this.prompt();
    }
    list = _.drop(list);
    let limit = _.last(list);
    if (+limit == limit) {
        list = _.dropRight(list);
        limit = +limit ? `LIMIT ${limit}` : '';
    } else {
        limit = 'LIMIT 1';
    }
    let _fields, _cond;
    if (list.length == 1) {
        if (/>=|>|=|<=|<|~|#/.test(list[0])) {
            _cond = list[0];
        } else {
            _fields = list[0];
        }
    } else if (list.length > 1) {
        _fields = list[0];
        _cond = list[1];
    }
    const fields = await formatFields(this, table, _fields, db);
    const cond = formatCond(_cond);
    await executeSQL(this, `SELECT ${fields} FROM ${table} ${cond} ${limit}`, db);
}
async function modifyTable(line, { db }) {
    let list = formatLine(line);
    const table = list[0];
    if (!table) {
        this.error('invalid oper');
        return this.prompt();
    }
    list = _.drop(list);
    let limit = _.last(list);
    if (+limit == limit) {
        list = _.dropRight(list);
        limit = +limit ? `LIMIT ${limit}` : '';
    } else {
        limit = 'LIMIT 1';
    }
    const setFields = list[0];
    if (!setFields) {
        this.error('invalid oper');
        return this.prompt();
    }
    const cond = formatCond(list[1]);
    await executeSQL(this, `UPDATE ${table} SET ${setFields} ${cond} ${limit}`, db);
}
async function removeTable(line, { db }) {
    let list = formatLine(line);
    const table = list[0];
    if (!table) {
        this.error('invalid oper');
        return this.prompt();
    }
    list = _.drop(list);
    let limit = _.last(list);
    if (+limit == limit) {
        list = _.dropRight(list);
        limit = +limit ? `LIMIT ${limit}` : '';
    } else {
        limit = 'LIMIT 1';
    }
    const cond = formatCond(list[0]);
    await executeSQL(this, `DELETE FROM ${table} ${cond} ${limit}`, db);
}
async function copyTableRows(line, { db }) {
    let list = formatLine(line);
    const table = list[0];
    if (!table) {
        this.error('invalid oper');
        return this.prompt();
    }
    list = _.drop(list);
    let limit = _.last(list);
    if (+limit == limit) {
        list = _.dropRight(list);
        limit = +limit ? `LIMIT ${limit}` : '';
    } else {
        limit = 'LIMIT 1';
    }
    let condStr = '';
    let setFields =[];
    if (!list[1]) {
        setFields = [];
        condStr = list[0];
    } else {
        setFields = list[0].split(',').map(o=>o.split('='));
        condStr = list[1];
    }
    const cond = formatCond(condStr);
    const docs = await querySQL(this, db, `SELECT * FROM ${table} ${cond} ${limit}`);
    const fields = getFieldsOfTable(table).filter(o=>o!=='id');
    for (const doc of docs) {
        const values = fields.map(o=>{
            // f1=$f1+1
            const setField = _.find(setFields, m=>m[0]===o);
            if (setField) {
                let setValue = setField[1];
                const matches = setValue.match(/\$\w+/g);
                if (matches) {
                    const tmps = matches.map(o=>o.replace('\$', ''));
                    for (const tmp of tmps) {
                        setValue = setValue.replace('$'+tmp, doc[tmp]);
                    }
                }
                if (/[+-\\*/]/.test(setValue)) {
                    return eval(eval(setValue));
                }
                return setValue;
            }
            const item = doc[o];
            if (item instanceof Date) {
                return 'NULL';
            }
            if (doc[o] !== undefined) {
                return JSON.stringify(doc[o]);
            }
            return 'NULL';
        });
        await executeSQL(this, `INSERT INTO ${table} (${fields.join(',')}) VALUES (${values.join(',')})`, db);
    }
}
function togglePrettyShell() {
    _prettyShell = !_prettyShell;
    this.print('pretty format change to ' + _prettyShell);
    this.prompt();
}
function showHelp () {
    this.print('commands:', 'blue');
    this.print('    <h|help>: show help');
    this.print('    <q|exit>: exit');
    this.print('    ls(l): showTables|ls -: showDatabases|ls table: showTableFields');
    this.print('    s(show): showTableLines # s table f1,f2>,<f3> (f1=xx&f2=yy)|f3=zz|f4~<xx>|f5#1,2,3 limit');
    this.print('    m(modify): modifyTable # m table f1=xx,f2=xx (f1=xx&f2=yy)|f3=zz|f4~<xx>|f5#1,2,3 limit');
    this.print('    r(remove): removeTable # r table (f1=xx&f2=yy)|f3=zz|f4~<xx>|f5#1,2,3 limit');
    this.print('    c(copy): copyTableRows # c table f1=$f1+1,f2=xx (f1=xx&f2=yy)|f3=zz|f4~<xx>|f5#1,2,3 limit');
    this.print('    _: togglePrettyShell');
    this.print('');
    this.prompt();
}
const COMMANDS = {
    'h|help': showHelp,
    'q|exit': function () { this.close() },
    'l|ls': showTables,
    's': showTableLines,
    'm': modifyTable,
    'r': removeTable,
    'c': copyTableRows,
    '-': togglePrettyShell,
    'default': executeLine,
};

createMysql(COMMANDS, { prompt: 'mysql', history: [ 's', 'm', 'r', 'c' ] });
