#!/usr/bin/env node

// mysql> alter user 'root'@'localhost' identified with mysql_native_password by '123456';
// mysql> flush privileges;

const mysql = require('mysql2');
const moment = require('moment');
const command = require('./js/command');
const _ = require('lodash');
const DATA_BASE = 'db_smart_plate';
const cache = {};

let _prettyShell = true;
async function createMysql (commands, options) {
    const connection = mysql.createConnection({
        host: process.argv[2] || 'localhost',
        user: 'root',
        password: '123456',
        database: DATA_BASE,
    });
    const tables = await getTables(null, connection);
    let fileds = [];
    for (const table of tables) {
        const _fileds = await getFieldsOfTable(null, table, connection);
        fileds = [...fileds, ..._fileds];
    }
    fileds = _.uniq(fileds);
    // 添加表，字段的自动完成
    function completer(line) {
        const words = line.replace(/\s,\s/g, ',').trimLeft().split(/\s/);
        const linePartial = _.last(_.last(words).split(','));
        let list = [];
        if (words.length <= 1) {
            list = ['select', 'update', 'delete'].filter((o) => o.startsWith(linePartial));
        } else {
            const preWord = _.toLower(_.nth(words, -2));
            if (_.includes(['from', 'update', 'into', 'ls'], preWord)) {
                list = tables.filter((o) => o.startsWith(linePartial));
            }  else {
                list = fileds.filter((o) => o.startsWith(linePartial));
            }
        }
        const found = list.filter((o) => o.startsWith(linePartial));
        return [found.length ? found : list, linePartial];
    }

    command(commands, { ...options, connection, completer });
}
async function getTables(self, connection) {
    if (!cache._tables) {
        cache._tables = (await querySQL(self, connection, 'show tables')).map(o=>o[_.keys(o)[0]]);
    }
    return cache._tables;
}
async function getFieldsOfTable(self, table, connection) {
    if (!cache[table]) {
        cache[table] = (await querySQL(self, connection, 'desc ' + table)).map(o=>o.Field);
    }
    return cache[table];
}
async function format(self, line, connection) {
    const matches = line.match(/select(.*)from\s*(\w+)/);
    if (matches) {
        let list = matches[1].split(/,|\s/).filter(o=>o);
        if (!_.includes(list, "*")) {
            list = list.map(o=>new RegExp(o, 'i'));
            const table = matches[2];
            const results = await getFieldsOfTable(self, table, connection);
            const fields = results.filter(o=>_.some(list, r=>r.test(o))).join(',');
            line = line.replace(/select.*from/, `select ${fields || '*'} from`);
        }
    }
    return line;
}
function formatResult(obj) {
    for (const key in obj) {
        const item = obj[key];
        if (item instanceof Buffer) {
            obj[key] = !!item.readInt8(0);
        } else if (item instanceof Date) {
            obj[key] = moment(item).format('YYYY-MM-DD HH:mm:ss');
        }
    }
    return obj;
}
function querySQL(self, connection, query) {
    return new Promise(resolve=>{
        connection.query(query, (err, results) => {
            if (err) {
                if (self) {
                    self.error(err);
                    self.prompt();
                }
                resolve([]);
            } else {
                resolve(results);
            }
        });
    })
}
async function executeSQL(line, { connection }) {
    if (!line) {
        return this.prompt();
    }
    line = await format(this, line, connection);
    const results = await querySQL(this, connection, line);
    if (results.forEach) {
        results.forEach(o=>{
            this.showJson(formatResult(o), _prettyShell);
        });
    } else {
        this.showJson(results, _prettyShell);
    }
    this.prompt();
}
async function showTables(line, { connection }) {
    if (!line) { // show tables
        let results = await querySQL(this, connection, 'select database() as db');
        this.print('tables in '+ results[0].db +' :', 'red');
        results = await querySQL(this, connection, 'show tables');
        if (results) {
            this.print(_.map(results, o=>o[_.keys(o)[0]]).join('  '), 'green');
            this.prompt();
        }
    } else if (line === '-') { // show databases
        this.print('databases :', 'red');
        const results = await querySQL(this, connection, 'show databases');
        this.print(results.map(o=>o.Database).join('  '), 'green');
        this.prompt();
    } else { // show table fileds
        line = line.replace(/[^\w]*/g, '');
        const fileds = await getFieldsOfTable(this, line, connection);
        this.print(fileds.join('  '), 'green');
        this.prompt();
    }
}
async function showTableLines(line, { connection }) {
    let list = line.replace(/\s,\s/g, ',').trim().split(/\s/);
    const table = list[0];
    let limit = _.last(list);
    if (typeof limit === 'number') {
        list = _.dropRight();
    } else {
        limit = 1;
    }

}
async function modifyTable(line, { connection }) {
    let list = line.replace(/\s,\s/g, ',').trim().split(/\s/);
    const table = list[0];
    let limit = _.last(list);
    if (typeof limit === 'number') {
        list = _.dropRight();
    } else {
        limit = 1;
    }

}
async function removeTable(line, { connection }) {
    let list = line.replace(/\s,\s/g, ',').trim().split(/\s/);
    const table = list[0];
    let limit = _.last(list);
    if (typeof limit === 'number') {
        list = _.dropRight();
    } else {
        limit = 1;
    }

}
async function copyTableRows(line, { connection }) {
    let list = line.replace(/\s,\s/g, ',').trim().split(/\s/);
    const table = list[0];
    let limit = _.last(list);
    if (typeof limit === 'number') {
        list = _.dropRight();
    } else {
        limit = 1;
    }

}
function togglePrettyShell() {
    _prettyShell = !_prettyShell;
    this.print('pretty format change to ' + _prettyShell);
    this.prompt();
}
function showHelp () {
    this.print('commands:', 'blue');
    this.print('    <h|help>: show help');
    this.print('    <q|exit>: exit');
    this.print('    ls(l): showTables|ls -: showDatabases|ls table: showTableFields');
    this.print('    show(s): showTableLines');
    this.print('    modify(s): modifyTable');
    this.print('    remove(s): removeTable');
    this.print('    _: togglePrettyShell');
    this.print('');
    this.prompt();
}
const COMMANDS = {
    'h|help': showHelp,
    'q|exit': function () { this.close() },
    'l|ls': showTables,
    's|show': showTableLines,
    'm|modify': modifyTable,
    'r|remove': removeTable,
    'c|copy': copyTableRows,
    '-': togglePrettyShell,
    'default': executeSQL,
};

createMysql(COMMANDS, { prompt: 'mysql' });
