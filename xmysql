#!/usr/bin/env node

// mysql> alter user 'root'@'localhost' identified with mysql_native_password by '123456';
// mysql> flush privileges;

const mysql = require('mysql2');
const command = require('./js/command');
const _ = require('lodash');
const DATA_BASE = 'db_smart_plate';
const tableFieldCache = {};

let _prettyShell = true;
function createMysql (commands, options) {
    const connection = mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: '123456',
        database: DATA_BASE,
    });
    command(commands, { ...options, connection });
}
async function getFieldsOfTable(self, table, connection) {
    if (!tableFieldCache[table]) {
        tableFieldCache[table] = (await querySQL(self, connection, 'desc ' + table)).map(o=>o.Field);
    }
    return tableFieldCache[table];
}
async function format(line, connection) {
    const matches = line.match(/select.*\/(.*)\/.*from\s*(\w+)/);
    if (matches) {
        const reg = new RegExp(matches[1], 'i');
        const table = matches[2];
        const results = await getFieldsOfTable(self, table, connection);
        const fields = results.filter(o=>reg.test(o));
        const allFields = [ 'id', ...line.replace(/select(.*)from/, '$1').split(',').filter(o=> !!o && !/\//.test(o)), ...fields ];
        line = line.replace(/select.*from/, `select ${allFields.join(',')} from`);
    }
    return line;
}
function querySQL(self, connection, query) {
    return new Promise(resolve=>{
        connection.query(query, (err, results) => {
            if (err) {
                self.error(err);
                self.prompt();
                resolve();
            } else {
                resolve(results);
            }
        });
    })
}
async function executeSQL(line, { connection }) {
    if (!line) {
        return this.prompt();
    }
    line = await format(this, line, connection);
    const results = await querySQL(this, connection, line);
    results.forEach(o=>{
        this.showJson(o, _prettyShell);
    });
    this.prompt();
}
async function showDatabases(line, { connection }) {
    this.print('databases :', 'red');
    const results = await querySQL(this, connection, 'show databases');
    this.print(results.map(o=>o.Database).join('  '), 'green');
    this.prompt();
}
async function showTables(line, { connection }) {
    let results = await querySQL(this, connection, 'select database() as db');
    this.print('tables in '+ results[0].db +' :', 'red');
    results = await querySQL(this, connection, 'show tables');
    if (results) {
        this.print(_.map(results, o=>o[_.keys(o)[0]]).join('  '), 'green');
        this.prompt();
    }
}
async function showTableDescript(table, { connection }) {
    let results = await querySQL(this, connection, 'desc ' + table);
    this.print('desc '+ table +' :', 'green');
    results.forEach(o=>{
        this.showJson(o, _prettyShell);
    });
    this.prompt();
}
function togglePrettyShell() {
    _prettyShell = !_prettyShell;
    this.print('pretty format change to ' + _prettyShell);
    this.prompt();
}
function showHelp () {
    this.print('commands:', 'blue');
    this.print('    <h|help>: show help');
    this.print('    <q|exit>: exit');
    this.print('    ls: showDatabases');
    this.print('    l: showTables');
    this.print('    d [table]: showTableDescript');
    this.print('    _: togglePrettyShell');
    this.print('');
    this.print('    select id, /xx yy/ from table');
    this.print('');
    this.prompt();
}
const COMMANDS = {
    'h|help': showHelp,
    'q|exit': function () { process.exit(0); },
    'ls': showDatabases,
    'l': showTables,
    'd': showTableDescript,
    '_': togglePrettyShell,
    'default': executeSQL,
};

createMysql(COMMANDS, { prompt: 'mysql' });
