#!/bin/bash
source ~/command/common

_oper=0
_reg=""
_func=""

function genrate_param_from_model() {
    if __mac ;then
        pbpaste|sed 's#:.*//#, //#'|pbcopy
    else
        cat /dev/clipboard|sed 's#:.*//#, //#' > /dev/clipboard
    fi
}

function genrate_param_without_comment() {
    if __mac ;then
        pbpaste|sed 's#\s*//.*$##'|sed 's/ = .*/,/'|pbcopy
    else
         cat /dev/clipboard|sed 's#\s*//.*$##'|sed 's/ = .*/,/' > /dev/clipboard
    fi
}

function genrate_param_for_one() {
    if __mac ;then
        pbpaste|sed 's#,#: 1,#'|pbcopy
    else
        cat /dev/clipboard|sed 's#\s*//.*$##'|sed 's/.* //' > /dev/clipboard
    fi
}

function genrate_param_for_js() {
    if __mac ;then
        pbpaste|sed "s#\(\w\+\)[,]*\s*\(//.*\)#\1: '', \2#"|pbcopy
    else
        cat /dev/clipboard|sed "s#\(\w\+\)[,]*\s*\(//.*\)#\1: '', \2#" > /dev/clipboard
    fi
}

function change_english_symbol_to_chinese() {
    if __mac ;then
        pbpaste|sed "s#,#，#g"|sed "s#:#：#g"|sed "s#\.#。#g"|pbcopy
    else
        cat /dev/clipboard|sed "s#,#，#g"|sed "s#:#：#g"|sed "s#\.#。#g" > /dev/clipboard
    fi
}

function change_chinese_symbol_to_english() {
    if __mac ;then
        pbpaste|sed "s#，#,#g"|sed "s#：#:#g"|sed "s#。#.#g"|pbcopy
    else
        cat /dev/clipboard|sed "s#，#,#g"|sed "s#：#:#g"|sed "s#。#.#g" > /dev/clipboard
    fi
}

function getSubmitComments() {
    str=""
    while read line;do
        str="${str}\`${line}\`,"
    done
    str="${str}\`${line}\`,"
    if [ "${_func:0:1}" = "=" ];then
        _func="m=>${_func:1}"
    else
        _func="'${_func}'";
    fi
    node -e " \
    var _ = require('lodash'); \
    var m = require('moment'); \
    var list = [${str}]; \
    var n = 0; \
    var ret = list.filter(o=>o).map(o=>{ \
    var c = o.match(/(.*)(${_reg})(.*)/); \
    var f = ${_func}; \
    c && (n++); \
    return !c ? o : c[1] + (typeof(f) === 'function' ? f(c[2], n) : f) + c[3]; \
}); \
console.log(ret.join('\n')); \
"
}

function add_for_number() {
    _reg="${1%:*}"
    _func="${1#*:}"
    if [ "$_reg:$_func" != "$1" ];then
        echo "格式：xt -a reg:num|str|func"
        exit
    fi
    if [ "$_reg" = "*" ];then
        _reg="^.*$"
    fi
    if __mac ;then
        pbpaste|getSubmitComments|pbcopy
    else
        cat /dev/clipboard|getSubmitComments > /dev/clipboard
    fi
}

function get_text_from_xml() {
    if __mac ;then
        pbpaste|sed "s#<[^>]*>##g"|sed "s#&nbsp;# #g"|pbcopy
    else
        cat /dev/clipboard|sed "s#<[^>]*>##g"|sed "s#&nbsp;# #g" > /dev/clipboard
    fi
}

function join_all_comment() {
    if __mac ;then
        pbpaste|sed -n '/,/p'|sed 's#.*//##'|sed 's#;$##'|sed ':a;N;s/\r\n\|\n\|\r/;/;t a;'|pbcopy
    else
        cat /dev/clipboard|sed -n '/,/p'|sed 's#.*//##'|sed 's#;$##'|sed ':a;N;s/\r\n\|\n\|\r/;/;t a;'> /dev/clipboard
    fi
}

function to_list() {
    local str list var
    if __mac ;then
        str=(`pbpaste`)
        list="["
        for var in "${str[@]}";do
            if [ "$list" = "[" ];then
                list="${list}'${var}'"
            else
                list="${list},'${var}'"
            fi
        done
        list="${list}]"
        echo $list|pbcopy
    else
        str=(`cat /dev/clipboard`)
        list="["
        for var in "${str[@]}";do
            if [ "$list" = "[" ];then
                list="${list}'${var}'"
            else
                list="${list},'${var}'"
            fi
        done
        list="${list}]"
        echo $list> /dev/clipboard
    fi
}

function gen_pc_code() {
    local  path _path pre post oldName newName newName1 _oldName _newName link
    pre="${1%,*}"
    post="${1#*,}"
    oldName="${pre%:*}"
    newName="${pre#*:}"
    _oldName="${post%:*}"
    _newName="${post#*:}"
    if [ "$oldName:$newName,$_oldName:$_newName" != "$1" ];then
        echo "格式：class:function"
        exit
    fi

    _path=`pwd`
    path="${_path%%/project*}"
    if [ "${path}" = "${_path}" ];then
        echo "请在工程中运行"
        exit
    fi
    newName1=`echo $newName|sed 's/^[a-z]/\u&/'`

    if ! [ -d "${path}/project/App/shared/pages/client/pages/${oldName}s" ];then
        echo "${path}/project/App/shared/pages/client/pages/${oldName}s 不存在"
        exit
    fi
    if ! [ -f "${path}/project/App/shared/actions/${oldName}s.js" ];then
        echo "${path}/project/App/shared/actions/${oldName}s.js 不存在"
        exit
    fi
    if ! [ -d "${path}/project/App/server/graphql/mutations/${oldName}" ];then
        echo "${path}/project/App/server/graphql/mutations/${oldName} 不存在"
        exit
    fi
    if ! [ -d "${path}/project/App/server/graphql/queries/${oldName}" ];then
        echo "${path}/project/App/server/graphql/queries/${oldName} 不存在"
        exit
    fi
    cd "${path}/project/App/shared/pages/client/pages"
    xr "$oldName:$newName,$_oldName:$_newName" -c "${oldName}s" force
    cd "${path}/project/App/shared/actions"
    xr "$oldName:$newName,$_oldName:$_newName" -f "${oldName}s.js"
    cd "${path}/project/App/server/graphql/mutations"
    xr "$oldName:$newName,$_oldName:$_newName" -c "${oldName}" force
    sed -i '$a\export * from '"'"./${newName}"'"';'  index.js
    cd "${path}/project/App/server/graphql/queries"
    xr "$oldName:$newName,$_oldName:$_newName" -c "${oldName}" force
    sed -i '$a\export * from '"'"./${newName}"'"';'  index.js
    sed -i '/===end===/i\const '${newName1}'s = AsyncLoad((cb) => require.ensure([], (require) => cb(require('"'"pages/client/pages/${newName}s"'"').default), '"'"${newName1}s"'"'));' "${path}/project/App/shared/routers/client.js"
    sed -i '/===end===/i\const '${newName1}'Detail = AsyncLoad((cb) => require.ensure([], (require) => cb(require('"'"pages/client/pages/${newName}s/pages/detail"'"').default), '"'"${newName1}Detail"'"'));' "${path}/project/App/shared/routers/client.js"
    sed -i '/<\/Route>,/i\\t\t<Route name='"'"${newName1}s"'"' path='"'"${newName}s"'"'>' "${path}/project/App/shared/routers/client.js"
    sed -i '/<\/Route>,/i\\t\t\t<IndexRoute component={'${newName1}'s} onEnter={authenticate} \/>' "${path}/project/App/shared/routers/client.js"
    sed -i '/<\/Route>,/i\\t\t\t<Route name='"'"${newName1}Detail"'"' path='"'"detail"'"' component={'${newName1}'Detail} onEnter={authenticate} />' "${path}/project/App/shared/routers/client.js"
    sed -i '/<\/Route>,/i\\t\t<\/Route>' "${path}/project/App/shared/routers/client.js"
    sed -i '/};/i\\n\t// '${_newName}'' "${path}/project/App/server/shared/helpers/api/urls.js"
    sed -i '/};/i\\t'${newName}'s: server + '"'"get${newName1}List"'"', // 获取'${_newName}'列表' "${path}/project/App/server/shared/helpers/api/urls.js"
    sed -i '/};/i\\t'${newName}': server + '"'"get${newName1}Detail"'"', // 获取'${_newName}'详情' "${path}/project/App/server/shared/helpers/api/urls.js"
    sed -i '/};/i\\tremove'${newName1}': server + '"'"remove${newName1}"'"', // 删除'${_newName}'' "${path}/project/App/server/shared/helpers/api/urls.js"
    sed -i '/};/i\\tmodify'${newName1}': server + '"'"modify${newName1}"'"', // 修改'${_newName}'' "${path}/project/App/server/shared/helpers/api/urls.js"
    sed -i '/};/i\\tcreate'${newName1}': server + '"'"create${newName1}"'"', // 创建'${_newName}'' "${path}/project/App/server/shared/helpers/api/urls.js"
    link=`sed -n '{/link:.*'${oldName}s'/{p;q}}' "${path}/project/App/shared/config/menu.js"|sed 's/'${oldName}s'/'${newName}s'/'`
    sed -i '/];/i\\t{\n\t\tlabel: '"'"${_newName}列表"'"',\n'"${link}"'\n\t\tkey: '"'"${newName}s"'"',\n\t},' "${path}/project/App/shared/config/menu.js"
}

function gen_server_code() {
    local  path _path pre post oldName newName newName1 _oldName _newName link
    pre="${1%,*}"
    post="${1#*,}"
    oldName="${pre%:*}"
    newName="${pre#*:}"
    _oldName="${post%:*}"
    _newName="${post#*:}"
    if [ "$oldName:$newName,$_oldName:$_newName" != "$1" ];then
        echo "格式：class:function"
        exit
    fi

    _path=`pwd`
    path="${_path%%/project*}"
    if [ "${path}" = "${_path}" ];then
        echo "请在工程中运行"
        exit
    fi
    newName1=`echo $newName|sed 's/^[a-z]/\u&/'`

    if ! [ -d "${path}/project/App/routers/posts/member/${oldName}" ];then
        echo "${path}/project/App/routers/posts/member/${oldName} 不存在"
        exit
    fi
    if ! [ -d "${path}/project/test/modules/member/${oldName}" ];then
        echo "${path}/project/test/modules/member/${oldName} 不存在"
        exit
    fi
    cd "${path}/project/App/routers/posts/member"
    xr "$oldName:$newName,$_oldName:$_newName" -c "${oldName}" force
    sed -i '$a\// '${newName}'' "index.js"
    sed -i '$a\export create'${newName1}' from '"'"./${newName}/create${newName1}"'"'; // 创建'${_newName}'' "index.js"
    sed -i '$a\export get'${newName1}'List from '"'"./${newName}/get${newName1}List"'"'; // 获取'${_newName}'列表' "index.js"
    sed -i '$a\export get'${newName1}'Detail from '"'"./${newName}/get${newName1}Detail"'"'; // 获取'${_newName}'详情' "index.js"
    sed -i '$a\export modify'${newName1}' from '"'"./${newName}/modify${newName1}"'"'; // 修改'${_newName}'' "index.js"
    sed -i '$a\export remove'${newName1}' from '"'"./${newName}/remove${newName1}"'"'; // 删除'${_newName}'' "index.js"
    cd "${path}/project/test/modules/member"
    xr "$oldName:$newName,$_oldName:$_newName" -c "${oldName}" force

}

function show_help()
{
    local -a list
    list="help"
    list=("${list[@]}" "Usage :xt [OPTIONS]")
    list=("${list[@]}" "  -m: 将model的字段变为函数的声明参数")
    list=("${list[@]}" "      @如: createTime: { type: Date }, // 创建时间 -> createTime, //创建时间")
    list=("${list[@]}" "  -p: 将函数的声明参数去除注释作为函数调用参数")
    list=("${list[@]}" "      @如: createTime, //创建时间 -> createTime,")
    list=("${list[@]}" "  -j: 将函数的声明参数添加参数空字符串作为调试参数")
    list=("${list[@]}" "      @如: createTime, //创建时间 -> createTime: '', //创建时间")
    list=("${list[@]}" "  -o: 将函数的声明参数添加参数数字1作为调试参数")
    list=("${list[@]}" "      @如: createTime, //创建时间 -> createTime: 1, //创建时间")
    list=("${list[@]}" "  -a: 通过正则表达式替换 (reg:±num|str|func, 注意\和=>需要转义成\\\\和=\>)")
    list=("${list[@]}" "      如果为func，使用=xx的格式，参数为(m, i, _, m)，其中m为匹配到的参数，i为序号[从1开始]，_为lodash, m为moment")
    list=("${list[@]}" "      @如: [ -a 1:fang ] : createTime: 1, //创建时间 -> createTime: fang, //创建时间")
    list=("${list[@]}" "      @如: [ -a 1:=m+4 ] : createTime: 1, //创建时间 -> createTime: 14, //创建时间")
    list=("${list[@]}" "      @如: [ -a 1:=+m+4 ] : createTime: 1, //创建时间 -> createTime: 5, //创建时间")
    list=("${list[@]}" "      @如: [ -a 1:=i+4 ] : createTime: 1, //创建时间 -> createTime: 4, //创建时间")
    list=("${list[@]}" "      @如: [ -a \\\\d:=+m+4 ] : createTime: 1, //创建时间 -> createTime: 5, //创建时间")
    list=("${list[@]}" "      @如: [ -a *:=\\\`pre\\ \\\${m}\\ post\\\` ] : createTime ->pre createTime post")
    list=("${list[@]}" "      @如: [ -a *:=\"\\\"pre \\\"+m+\" post\\\"\" ] : createTime ->pre createTime post")
    list=("${list[@]}" "      @如: [ -a *:=\"\\\"pre \\\"+m+\" post\\\"\" ] : createTime ->pre createTime post")
    list=("${list[@]}" "  -l: 转化为list，分隔符为\n或者空格")
    list=("${list[@]}" "      @如: 1 2 3 4 5 -> ['1','2','3','4','5']")
    list=("${list[@]}" "  -t: 获取xml的文字部分")
    list=("${list[@]}" "  -c: 将英文的符号改变为中文的符号")
    list=("${list[@]}" "  -C: 将中文的符号改变为英文的符号")
    list=("${list[@]}" "  -e: 所有的注释用分号分开")
    list=("${list[@]}" "  -w oldname:newname[,oldname1:newname1]: 生成pc端所有的代码")
    list=("${list[@]}" "  -s oldname:newname[,oldname1:newname1]: 生成server端所有的代码")
    list=("${list[@]}" "  -h: 帮助")
    __msgbox "${list[@]}"
    exit
}

function main()
{
    local oper_right param
    oper_right=0

    if [ "$1" = "--help" ];then
        show_help
    fi

    while getopts :mpojtlta:w:s:cCh opt;do
        oper_right=1
        case $opt in
            m)_oper=1;;
            p)_oper=2;;
            o)_oper=3;;
            j)_oper=4;;
            a)_oper=5;param="$OPTARG";;
            t)_oper=6;;
            c)_oper=7;;
            C)_oper=8;;
            l)_oper=9;;
            e)_oper=10;;
            w)_oper=11;param="$OPTARG";;
            s)_oper=12;param="$OPTARG";;
            *)show_help;;
        esac
    done

    case $_oper in
        1)genrate_param_from_model;;
        2)genrate_param_without_comment;;
        3)genrate_param_for_one;;
        4)genrate_param_for_js;;
        5)add_for_number "${param}";;
        6)get_text_from_xml;;
        7)change_english_symbol_to_chinese;;
        8)change_chinese_symbol_to_english;;
        9)to_list;;
        10)join_all_comment;;
        11)gen_pc_code "${param}";;
        12)gen_server_code "${param}";;
        *)show_help;;
    esac
}

main "$@"
