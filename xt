#!/bin/bash
source ~/command/common

_oper=0
_reg=""
_func=""

function genrate_param_from_model() {
    if __mac ;then
        pbpaste|sed 's#:.*//#, //#'|pbcopy
    else
         cat /dev/clipboard|sed 's#:.*//#, //#' > /dev/clipboard
    fi
}

function genrate_param_without_comment() {
    if __mac ;then
        pbpaste|sed 's#\s*//.*$##'|sed 's/.* //'|pbcopy
    else
         cat /dev/clipboard|sed 's#\s*//.*$##'|sed 's/.* //' > /dev/clipboard
    fi
}

function genrate_param_for_one() {
    if __mac ;then
        pbpaste|sed 's#,#: 1,#'|pbcopy
    else
         cat /dev/clipboard|sed 's#\s*//.*$##'|sed 's/.* //' > /dev/clipboard
    fi
}

function genrate_param_for_js() {
    if __mac ;then
        pbpaste|sed "s#\(\w\+\)[,]*\s*\(//.*\)#\1: '', \2#"|pbcopy
    else
         cat /dev/clipboard|sed "s#\(\w\+\)[,]*\s*\(//.*\)#\1: '', \2#" > /dev/clipboard
    fi
}

function change_english_symbol_to_chinese() {
    if __mac ;then
        pbpaste|sed "s#,#，#g"|sed "s#:#：#g"|sed "s#\.#。#g"|pbcopy
    else
         cat /dev/clipboard|sed "s#,#，#g"|sed "s#:#：#g"|sed "s#\.#。#g" > /dev/clipboard
    fi
}

function change_chinese_symbol_to_english() {
    if __mac ;then
        pbpaste|sed "s#，#,#g"|sed "s#：#:#g"|sed "s#。#.#g"|pbcopy
    else
         cat /dev/clipboard|sed "s#，#,#g"|sed "s#：#:#g"|sed "s#。#.#g" > /dev/clipboard
    fi
}

function getSubmitComments() {
    str=""
    while read line;do
        str="${str}\`${line}\`,"
    done
    str="${str}\`${line}\`,"
    if [ "${_func:0:1}" = "=" ];then
        _func="i=>${_func:1}"
    else
        _func="'${_func}'";
    fi
	node -e " \
    var _ = require('lodash'); \
    var m = require('moment'); \
    var list = [${str}]; \
    var ret = list.filter(o=>o).map(o=>{ \
        var c = o.match(/(.*)(${_reg})(.*)/); \
        var f = ${_func}; \
        return !c ? o : c[1] + (typeof(f) === 'function' ? f(c[2]) : f) + c[3]; \
    }); \
	console.log(ret.join('\n')); \
	"
}

function add_for_number() {
    _reg="${1%:*}"
    _func="${1#*:}"
    if [ "$_reg:$_func" != "$1" ];then
        echo "格式：xt -a reg:num|str|func"
        exit
    fi
    if __mac ;then
        pbpaste|getSubmitComments|pbcopy
    else
         cat /dev/clipboard|getSubmitComments > /dev/clipboard
    fi
}

function get_text_from_xml() {
    if __mac ;then
        pbpaste|sed "s#<[^>]*>##g"|pbcopy
    else
         cat /dev/clipboard|sed "s#<[^>]*>##g" > /dev/clipboard
    fi
}

function to_list() {
    local str list var
    if __mac ;then
        str=(`pbpaste`)
        list="["
        for var in "${str[@]}";do
            if [ "$list" = "[" ];then
                list="${list}'${var}'"
            else
                list="${list},'${var}'"
            fi
        done
        list="${list}]"
        echo $list|pbcopy
    else
         str=(`cat /dev/clipboard`)
         list="["
         for var in "${str[@]}";do
             if [ "$list" = "[" ];then
                 list="${list}'${var}'"
             else
                 list="${list},'${var}'"
             fi
         done
         list="${list}]"
         echo $list> /dev/clipboard
    fi
}

function show_help()
{
	local -a list
	list="help"
	list=("${list[@]}" "Usage :xt [OPTIONS]")
	list=("${list[@]}" "  -m: 将model的字段变为函数的声明参数")
	list=("${list[@]}" "      @如: createTime: { type: Date }, // 创建时间 -> createTime, //创建时间")
	list=("${list[@]}" "  -p: 将函数的声明参数去除注释作为函数调用参数")
	list=("${list[@]}" "      @如: createTime, //创建时间 -> createTime,")
	list=("${list[@]}" "  -j: 将函数的声明参数添加参数空字符串作为调试参数")
	list=("${list[@]}" "      @如: createTime, //创建时间 -> createTime: '', //创建时间")
	list=("${list[@]}" "  -o: 将函数的声明参数添加参数数字1作为调试参数")
	list=("${list[@]}" "      @如: createTime, //创建时间 -> createTime: 1, //创建时间")
    list=("${list[@]}" "  -a: 通过正则表达式替换 (reg:±num|str|func, 注意\和=>需要转义成\\\\和=\>)")
    list=("${list[@]}" "      如果为func，使用=xx的格式，参数为(i, _, m)，其中i为匹配到的参数，_为lodash, m为moment")
    list=("${list[@]}" "      @如: [ -a 1:fang ] : createTime: 1, //创建时间 -> createTime: fang, //创建时间")
    list=("${list[@]}" "      @如: [ -a 1:=i+4 ] : createTime: 1, //创建时间 -> createTime: 5, //创建时间")
	list=("${list[@]}" "  -l: 转化为list，分隔符为\n或者空格")
    list=("${list[@]}" "      @如: 1 2 3 4 5 -> ['1','2','3','4','5']")
	list=("${list[@]}" "  -t: 获取xml的文字部分")
	list=("${list[@]}" "  -c: 将英文的符号改变为中文的符号")
	list=("${list[@]}" "  -C: 将中文的符号改变为英文的符号")
	list=("${list[@]}" "  -h: 帮助")
	__msgbox "${list[@]}"
    exit
}

function main()
{
	local oper_right param
	oper_right=0

	if [ "$1" = "--help" ];then
		show_help
	fi

	while getopts :mpojtla:cCh opt;do
		oper_right=1
		case $opt in
			m)_oper=1;;
			p)_oper=2;;
			o)_oper=3;;
			j)_oper=4;;
			a)_oper=5;param="$OPTARG";;
			t)_oper=6;;
			c)_oper=7;;
			C)_oper=8;;
			l)_oper=9;;
			*)show_help;;
		esac
	done

	case $_oper in
        1)genrate_param_from_model;;
		2)genrate_param_without_comment;;
        3)genrate_param_for_one;;
        4)genrate_param_for_js;;
        5)add_for_number "${param}";;
        6)get_text_from_xml;;
        7)change_english_symbol_to_chinese;;
        8)change_chinese_symbol_to_english;;
        9)to_list;;
        *)show_help;;
	esac
}

main "$@"
