#!/bin/bash
#参考:https://github.com/emptyhua/bash-pinyin-completion
#参考:http://linuxtoy.org/archives/chsdir.html
#参考:/etc/bash_completion

#用于保存覆盖之前的函数
#from http://mivok.net/2009/09/20/bashfunctionoverride.html
__logfile=~/command/pinyin.log
__HAS_LOG=0
__MYLOG() {
    if [ "$__HAS_LOG" = "1" ];then
        echo "$@" >> ${__logfile}
    fi
}
_py_save_function() {
    local ORIG_FUNC=$(declare -f $1)
    local NEWNAME_FUNC="$2${ORIG_FUNC#$1}"
    eval "$NEWNAME_FUNC"
}
_py_completion() {
    local IFS=$'\t\n'
    local cur _dname_real dname_real bname_real dname bname sep var var1 found len
    local -a list sys_list

    cur="$(_get_cword)"
    __MYLOG "cur=${cur}"
    if [ "${cur:${#cur}-1}" = "/" ];then
        dname="${cur}"
        bname=""
        sep=""
    else
        dname="$(dirname "$cur")";
        bname="$(basename "$cur")";
        if [[ "$dname" == "/" ]];then
            sep=""
        else
            sep="/"
        fi
    fi

    #用于消除转义符 \
    dname_real="${dname//\\/}"
    bname_real="${bname//\\/}"

    if [ "${cur:0:1}" = "~" ];then
        dname_real="${dname_real#${HOME}}"
    fi

    eval _dname_real="$dname"
    test ! -d "$_dname_real" && return 0;
    cd $_dname_real

    __MYLOG dname_real="$dname_real"
    __MYLOG _dname_real="$_dname_real"
    __MYLOG bname_real="$bname_real"
    __MYLOG sep="$sep"

    if [[ "$1" == "-d" ]];then
        __MYLOG "has -d"
        if [ "$__HAS_LOG" = "1" ];then
            list=($(compgen -d|sort|pinyinmatch "$bname_real" $PY_FULL 2>${__logfile}))
        else
            list=($(compgen -d|sort|pinyinmatch "$bname_real" $PY_FULL))
        fi
    else
        if [ "$__HAS_LOG" = "1" ];then
            list=($(compgen -f|sort|pinyinmatch "$bname_real" $PY_FULL 2>${__logfile}))
        else
            list=($(compgen -f|sort|pinyinmatch "$bname_real" $PY_FULL))
        fi
        [ ${#list[@]} -ne 0 ] && _compopt_o_filenames
    fi
    cd $OLDPWD
    sys_list=("${COMPREPLY[@]}")

    __MYLOG list="${list[@]}"
    __MYLOG sys_list="${sys_list[@]}"

    if [ ${#list[@]} -eq 1 ];then
        if [ "${list[0]}" = "$bname_real" ];then # 如果关键字和查询出来的是相同，则采取系统的集合
            # 出去重复的COMPREPLY
            COMPREPLY=()
            for var in "${sys_list[@]}";do
                found=0
                for var1 in "${COMPREPLY[@]}";do
                    if [ "$var" = "$var1" ];then
                        found=1
                    fi
                done
                if [ "$found" = "0" ];then
                    COMPREPLY=("${COMPREPLY[@]}" "${var}");
                fi
            done
        else
            if [ "$dname_real" != "." ];then
                COMPREPLY=("${dname_real}${sep}${list[0]}")
            else
                COMPREPLY=("${list[0]}")
            fi
        fi
    elif [[ "${dname_real:0:1}" = "~" ||"${dname_real:0:1}" = "/"  ]];then
        COMPREPLY=()
        for var in "${list[@]}";do
            COMPREPLY=("${COMPREPLY[@]}" "${dname_real}${sep}${var}")
        done
    else
        COMPREPLY=("${list[@]}")
    fi

    len=${#COMPREPLY[@]}
    var1=$(echo "${list[@]}"|grep "[^ -~]")
    if [[ ${len} -gt 1 && -n "$var1" ]];then
        # 如果全部开头有相同的部分，则可以用数字选择
        var1="${COMPREPLY[0]:0:1}"
        found=0
        for var in "${COMPREPLY[@]:1}";do
            if [ "${var:0:1}" != "${var1}" ];then
                found=1
            fi
        done
        if [ "$found" = "0" ];then
            COMPREPLY=("+[1-${len}]选择:" "${COMPREPLY[@]}")
        fi
    fi

    __MYLOG COMPREPLY="${COMPREPLY[@]}"
}

_py_save_function _filedir _py_bak_filedir

_filedir() {
    _py_bak_filedir $@
    _py_completion $@
}

_py_save_function _filedir_xspec _py_bak_filedir_xspec

_filedir_xspec () {
    _py_bak_filedir_xspec $@
    _py_completion $@
}

unset -f _py_save_function
