#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var path = require('path');
var express = require('express');
var multer  = require('multer')
var qrcode = require('./js/qrcode.js');
var upload = multer({ dest: '.' });
var shell = require('shelljs');

function getIPAdress() {
    var interfaces = os.networkInterfaces();
    for(var devName in interfaces){
        var iface = interfaces[devName];
        for(var i=0;i<iface.length;i++){
            var alias = iface[i];
            if(alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal){
                return alias.address;
            }
        }
    }
}

function startServer(port, file) {
    var server = app.listen(port);
    server.on('listening', function () {
        console.log(`http://${ip}:${port}`);
        if (typeof file !== 'undefined') {
            const url = `http://${ip}:${port}/${file}`;
            qrcode.showCode(url);
        }

        process.on('SIGINT', ()=>{
            if (typeof file !== 'undefined') {
                qrcode.resetScreen();
            }
             process.exit(0);
        })
    });
    server.on('error', function (err) {
        startServer(port+1, file);
    })
}

function startUploadServer(port) {
    var server = app.listen(port);
    app.post('/upload', upload.single('file'), function(req, res, next){
        var file = req.file;
        var dest = '没有上传任何文件';
        if (file) {
            dest = path.join(shell.pwd()+'', file.destination, file.originalname);
            shell.mv(file.path, dest);
            console.log(dest);
        }
        res.send(dest);
    });
    app.get('/*', function(req, res, next){
        var form = `
        <meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=0">
        <body style="display: flex; align-items: center; justify-content: center;">
            <div>
                <input type="file" id="file" />
                <button onclick="uploadFile()">上传</button>
                <br>
                <br>
                <div style="text-align: left;display: inline-block;width: 300px; height: 20px; border: 1px solid #44A1F8; border-radius: 2px;position: relative">
                    <div id="progress_bar" style="display: inline-block; width: 0px; height: 20px;background-color: #64B587"></div>
                    <div style="text-align: center;width: 300px;position: absolute; top: 0; font-size:16px; color: #413F43">
                        <div id="loading">
                            请选择文件上传
                        </div>
                    </div>

                </div>
            </div>
            <script>
                function uploadFile(){
                    var el = document.getElementById("file");
                    var file_obj = el.files[0];
                    var progress_bar = document.getElementById("progress_bar");
                    var loading_dom = document.getElementById("loading");
                    if(file_obj){
                        var form = new FormData();
                        form.append("file", file_obj);
                        var xhr = new XMLHttpRequest();
                        xhr.onload = function() { el.outerHTML = el.outerHTML; loading_dom.innerHTML = "上传成功"; };
                        xhr.onerror = function() { loading_dom.innerHTML = "上传失败"; };
                        xhr.upload.onprogress = function(e) {
                            var loading = Math.round(e.loaded / e.total * 100);
                            loading_dom.innerHTML = "上传进度"+loading+"%"
                            progress_bar.style.width = String(loading * 3) + "px";
                        };
                        xhr.open("POST", "/upload", true);
                        xhr.send(form);
                    } else{
                        loading_dom.innerHTML = "请选择文件上传";
                    }
                }
            </script>
        </body>
        `;
        res.send(form);
    });

    server.on('listening', function () {
        const url = `http://${ip}:${port}`;
        console.log(url);
        qrcode.showCode(url);
        process.on('SIGINT', ()=>{
            qrcode.resetScreen();
             process.exit(0);
        })
    });
    server.on('error', function (err) {
        startUploadServer(port+1);
    })
}

function startImageServer(port, file, mode) {
    var server = app.listen(port);
    app.get('/*', function(req, res, next){
        var html = `
        <style>
            body,html { margin: 0; padding: 0; background: black; }
            .hlineContainer { position: absolute; left: 0px; display: flex; flex-direction: row; align-items: center; background:rgba(0,0,0,0);}
            .hlineText { color: white; font-size: 8px; width: 20px; margin-left: 10px; }
            .hline { height: 1px; background:red; margin-left: 10px; flex: 1; }
            .vlineContainer { position: absolute; top: 0px; display: flex; flex-direction: column; justify-content: center; background:rgba(0,0,0,0);}
            .vlineText { color: white; font-size: 8px; height: 20px; margin-top: 15px; display: flex; justify-content: center; padding-right: 10px; }
            .vline { width: 1px; background:red; margin-top: 10px; flex: 1; }
        </style>
        <body>
            <img id="img" style="background: white; margin-left: 40px; margin-top: 45px; z-index: 100;"/>
            <script>
                var hmode = ${!mode||mode==='h'};
                var vmode = ${!mode||mode==='v'};
                var y = 0;
                var x = 0;
                var step = 10;
                var offset = 40;
                var ty = Math.floor((document.body.clientHeight-100) / step);
                var tx = Math.floor((document.body.clientWidth-100) / step);
                function createHL(index, step, offset) {
                    var div = document.createElement("div");
                    div.className = "hlineContainer";
                    div.style.top = offset + index * step;
                    div.style.height = step;
                    div.style.width = (tx+3) * step;
                    div.innerHTML = "<div class='hlineText'>"+(!(index%5) ? index * step : "" )+"</div><div class='hline' style='"+(!(index%5) ? "margin-left: 1px;" : "" )+"'></div>";
                    document.body.appendChild(div);
                }
                function createVL(index, step, offset) {
                    var div = document.createElement("div");
                    div.className = "vlineContainer";
                    div.style.left = offset + index * step;
                    div.style.width = step;
                    div.style.height = (ty+3) * step+5;
                    div.innerHTML = "<div class='vlineText'>"+(!(index%5) ? index * step : "" )+"</div><div class='vline' style='"+(!(index%5) ? "margin-top: 1px;" : "" )+"'></div>";
                    document.body.appendChild(div);
                }
                while (hmode && y < ty) {
                    createHL(y, step, offset);
                    y++;
                }
                while (vmode && x < tx) {
                    createVL(x, step, offset);
                    x++;
                }
                document.getElementById('img').src = "${file}";
            </script>
        <body>
        `;
        res.send(html);
    });

    server.on('listening', function () {
        const url = `http://${ip}:${port}`;
        console.log(url);
    });
    server.on('error', function (err) {
        startImageServer(port+1, file, mode);
    })
}

function getHtmlInDir(dir) {
    var html = `<html><head>
    <title>${dir}的文件列表</title>
    <link rel="stylesheet" href="viewer/viewer.min.css" />
    <script type="text/javascript" src="viewer/viewer.min.js"></script>
    </head><body style="display:flex; flex-direction: row; flex-wrap: wrap;">`;
    fs.readdirSync(dir).forEach(function(file, index) {
        var fullname = path.join(dir, file);
        var info = fs.statSync(fullname);
        if(info.isDirectory()) {
            html += getHtmlInDir(fullname);
        } else {
            html += `<div style="position:relative; width:144px; height: 144px; display: flex; justify-content: center; align-items: center; margin: 10px; padding:2px; background-color: #EBEBEB">`;
            if (['.png', '.jpg', '.gif', 'jpeg'].indexOf(path.extname(file)) !== -1) {
                html += `<img src="${fullname}" style="max-width: 140px; max-height: 140px;">`;
            } else {
                html += `<a href="${fullname}" style="max-width: 140px; max-height: 140px;">${file}</a>`;
            }
            html += `<span style="position: absolute; font-size: 10px; max-width: 140px; height: 12px; overflow: scroll; word-break: keep-all; top: 150px;">${fullname}</span></div>`;
        }
    });
    html += `</body>
    <script>
    var viewer = new Viewer(document.body, {
        toolbar: {
            prev: 1,
            zoomOut: 1,
            oneToOne: 1,
            play: 1,
            reset: 1,
            zoomIn: 1,
            next: 1,
        },
    })
    </script>
    </html>`;
    return html;
}

function startDirServer(port, dir) {
    var html = getHtmlInDir(dir);
    var server = app.listen(port);
    app.get('/list', function(req, res, next){
        res.send(html);
    });

    server.on('listening', function () {
        const url = `http://${ip}:${port}/list`;
        console.log(url);
        openChrome(url);
    });
    server.on('error', function (err) {
        startDirServer(port+1, dir);
    })
}

function createServerFile(filename, port = 4000) {
    code = 'var express = require("express");';
    code += '\nvar bodyParser = require("body-parser");';
    code += '\nvar fs = require("fs");';
    code += '\nvar app = express();';
    code += '\n';
    code += '\napp.use(express.static(__dirname + "/public"));';
    code += '\napp.use(bodyParser.urlencoded({ extended: false }));';
    code += '\napp.use(bodyParser.json());';
    code += '\napp.use(bodyParser.text());';
    code += '\n';
    code += '\napp.get("/test", (req, res)=>{';
    code += '\n    console.log(req.body);';
    code += '\n    res.send("hello");';
    code += '\n});';
    code += '\n';
    code += '\napp.listen('+port+', function() {';
    code += '\n    console.log("server listen on: http://localhost:'+port+'");';
    code += '\n});';
    fs.writeFileSync(filename, code);
}

function openChrome(url, isMobile) {
    require('child_process').exec(`osascript -e '
        tell application \"Google Chrome\"
            activate
            open location \"${url}\"
            ${!isMobile ? '' : `delay 0.5
            tell application \"System Events\"
                keystroke \"j\" using {option down, command down}
            end tell`}
        end tell
    '`);
}

var ip = getIPAdress();
var port = 4000;
var app = express();
app.all('*', (req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    next();
});
app.use(express.static('.'));
app.use(express.static(__dirname+'/static'));

var param = process.argv[2];
var param1 = process.argv[3];
var param2 = process.argv[4];
if (param === '-h' || param === '--help') {
    console.log('');
    console.log('xserver opts');
    console.log('');
    console.log('   -h|--help: show help');
    console.log('   -c|--create [port]: create a app.js file for nodejs server');
    console.log('   -u|--upload: upload files with multer');
    console.log('   -i|--image [name]: show iphone6 size for image');
    console.log('   -g|--grid [name] [v|h]: show grid for image');
    console.log('   -d|--dir [name]: show dir file list');
    console.log('   file: show download qrcode for file');
    console.log('');
} else if (param === '-u' || param === '--upload') {
    startUploadServer(port);
} else if (param === '-c' || param === '--create') {
    createServerFile('app.js', param1);
} else if (param === '-i' || param === '--image') {
    startServer(port);
    openChrome('http:'+ip+':'+port+'/'+param1, true);
} else if (param === '-d' || param === '--dir') {
    startDirServer(port, param1);
} else if (param === '-g' || param === '--grid') {
    startImageServer(port, param1, param2);
    openChrome('http:'+ip+':'+port);
} else {
    startServer(port, param);
}
