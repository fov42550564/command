#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var path = require('path');
var express = require('express');
var multer  = require('multer')
var qrcode = require('./js/qrcode.js');
var upload = multer({ dest: '.' });
var shell = require('shelljs');

function getIPAdress() {
    var interfaces = os.networkInterfaces();
    for(var devName in interfaces){
        var iface = interfaces[devName];
        for(var i=0;i<iface.length;i++){
            var alias = iface[i];
            if(alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal){
                return alias.address;
            }
        }
    }
}

function startServer(port, file) {
    var server = app.listen(port);
    server.on('listening', function () {
        console.log(`http://${ip}:${port}`);
        if (typeof file !== 'undefined') {
            const url = `http://${ip}:${port}/${file}`;
            qrcode.showCode(url);
        }

        process.on('SIGINT', ()=>{
            if (typeof file !== 'undefined') {
                qrcode.resetScreen();
            }
             process.exit(0);
        })
    });
    server.on('error', function (err) {
        startServer(port+1, file);
    })
}

function startUploadServer(port) {
    var server = app.listen(port);
    app.post('/upload', upload.single('file'), function(req, res, next){
        var file = req.file;
        var dest = '没有上传任何文件';
        if (file) {
            dest = path.join(shell.pwd()+'', file.destination, file.originalname);
            shell.mv(file.path, dest);
            console.log(dest);
        }
        res.send(dest);
    });
    app.get('/*', function(req, res, next){
        var form = `
        <body style="display: flex; align-items: center; justify-content: center;">
            <form action="/upload" method="post" enctype="multipart/form-data" style="transform:scale(3,3);">
                <h2>文件上传</h2>
                <input type="file" name="file" >
                <br>
                <br>
                <br>
                <input type="submit" value="上  传">
            </form>
        </body>
        `;
        res.send(form);
    });

    server.on('listening', function () {
        const url = `http://${ip}:${port}`;
        console.log(url);
        qrcode.showCode(url);
        process.on('SIGINT', ()=>{
            qrcode.resetScreen();
             process.exit(0);
        })
    });
    server.on('error', function (err) {
        startUploadServer(port+1);
    })
}

function getHtmlInDir(path) {
    var html = `<html><head>
    <title>${path}的文件</title>
    <link rel="stylesheet" href="viewer/viewer.min.css" />
    <script type="text/javascript" src="viewer/viewer.min.js"></script>
    </head><body style="display:flex; flex-direction: row; flex-wrap: wrap;">`;
    var pa = fs.readdirSync(path);
    pa.forEach(function(ele,index) {
        var info = fs.statSync(path+"/"+ele)
        if(info.isDirectory()) {
            getHtmlInDir(path+"/"+ele);
        } else {
            html += `<div style="position:relative; width:144px; height: 144px; display: flex; justify-content: center; align-items: center; margin: 10px; padding:2px; background-color: #EBEBEB">
            <img src="${path}/${ele}" style="max-width: 140px; max-height: 140px;">
            <span style="position: absolute; font-size: 10px; max-width: 140px; height: 12px; overflow: hidden; top: 150px;">${ele}</span>
            </div>`;
        }
    });
    html += `</body>
    <script>
    var viewer = new Viewer(document.body, {
        toolbar: {
            prev: 1,
            zoomOut: 1,
            oneToOne: 1,
            play: 1,
            reset: 1,
            zoomIn: 1,
            next: 1,
        },
    })
    </script>
    </html>`;
    return html;
}

function startDirServer(port, path) {
    var html = getHtmlInDir(path);
    var server = app.listen(port);
    app.get('/showDirFiles', function(req, res, next){
        res.send(html);
    });

    server.on('listening', function () {
        const url = `http://${ip}:${port}/showDirFiles`;
        console.log(url);
        openChrome(url);
    });
    server.on('error', function (err) {
        startDirServer(port+1, path);
    })
}

function createServerFile(filename) {
    code = 'var express = require("express");';
    code += '\nvar bodyParser = require("body-parser");';
    code += '\nvar fs = require("fs");';
    code += '\nvar app = express();';
    code += '\n';
    code += '\napp.use(express.static(__dirname + "/public"));';
    code += '\napp.use(bodyParser.urlencoded({ extended: false }));';
    code += '\napp.use(bodyParser.json());';
    code += '\napp.use(bodyParser.text());';
    code += '\n';
    code += '\napp.get("/test", (req, res)=>{';
    code += '\n    console.log(req.body);';
    code += '\n    res.send("hello");';
    code += '\n});';
    code += '\n';
    code += '\napp.listen(3000, function() {';
    code += '\n    console.log("server listen on: http://localhost:3000");';
    code += '\n});';
    fs.writeFileSync(filename, code);
}

function openChrome(url, isMobile) {
    require('child_process').exec(`osascript -e '
        tell application \"Google Chrome\"
            activate
            open location \"${url}\"
            ${!isMobile ? '' : `delay 0.5
            tell application \"System Events\"
                keystroke \"j\" using {option down, command down}
            end tell`}
        end tell
    '`);
}

var ip = getIPAdress();
var port = 4000;
var app = express();
app.all('*', (req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    next();
});
app.use(express.static('.'));
app.use(express.static(__dirname+'/static'));

var param = process.argv[2];
var param1 = process.argv[3];
if (param === '-h' || param === '--help') {
    console.log('');
    console.log('xserver opts');
    console.log('');
    console.log('   -h|--help: show help');
    console.log('   -c|--create: create a app.js file for nodejs server');
    console.log('   -u|--upload: upload files with multer');
    console.log('   -i|--image [name]: show iphone6 size for image');
    console.log('   -d|--dir [name]: show dir file list');
    console.log('   file: show download qrcode for file');
    console.log('');
} else if (param === '-u' || param === '--upload') {
    startUploadServer(port);
} else if (param === '-c' || param === '--create') {
    createServerFile('app.js');
} else if (param === '-i' || param === '--image') {
    startServer(port);
    openChrome('http:'+ip+':'+port+'/'+param1, true);
} else if (param === '-d' || param === '--dir') {
    startDirServer(port, param1);
} else {
    startServer(port, param);
}
