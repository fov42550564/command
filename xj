#!/usr/bin/env node

const osHomedir = require('os-homedir');
const command = require('./js/command');
const path = require('path');
const fs = require('fs-extra');
const _ = require('lodash');
const shell = require('shelljs');
let headers = [];
let codes = [];

function clearCode() {
    codes = [];
    this.prompt();
}
function showCode() {
    this.print(codes.join('\n'));
    this.prompt();
}
function format(line) {
    const lastWord = _.last(line);
    if (!_.includes(['}', ';'], lastWord)) {
        line = `${line};`;
    }
    if (/log\(.*\)/.test(line)) {
        line = line.replace('log(', 'System.out.println(');
    }
}
function appendCode(line) {
    codes.push(format(line));
    fs.writeFileSync(path.join(osHomedir(), 'command/java/Test.java'), `${headers.join('\n')}public class Test {public static void main(String[] args) {${codes.join('\n')}}}`);
    shell.exec('xjava -s', { silent:true }, (code, stdout, stderr) => {
        if (stderr) {
            this.print(stderr, 'red');
        } else {
            this.print(stdout, 'green');
        }
        this.prompt();
    });
}
function showHelp () {
    this.print('commands:', 'blue');
    this.print('    <h|help>: show help');
    this.print('    <q|exit>: exit');
    this.print('    <c|clear>: 清除缓存的内容');
    this.print('    <s|show>: 显示缓存的内容');
    this.print('');
    this.prompt();
}
const COMMANDS = {
    'h|help': showHelp,
    'q|exit': function () { process.exit(0); },
    'c|clear': clearCode,
    's|show': showCode,
    'default': appendCode,
};

command(COMMANDS, { prompt: 'java' });
